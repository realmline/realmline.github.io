<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-10-27T15:00:53+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">不可视境界线</title><subtitle>用于个人学习整理的博客</subtitle><author><name>true</name></author><entry><title type="html">github远程库</title><link href="http://localhost:4000/2018/10/27/git-1.2.html" rel="alternate" type="text/html" title="github远程库" /><published>2018-10-27T00:00:00+08:00</published><updated>2018-10-27T00:00:00+08:00</updated><id>http://localhost:4000/2018/10/27/git-1.2</id><content type="html" xml:base="http://localhost:4000/2018/10/27/git-1.2.html">&lt;h1 id=&quot;关联github远程库&quot;&gt;关联github远程库&lt;/h1&gt;

&lt;h3 id=&quot;前言&quot;&gt;前言&lt;/h3&gt;

&lt;p&gt;github是一个开源协作平台，也可以作为免费的远程仓库，这一篇主要记录关联github远程库的各种操作，&lt;strong&gt;由于我是在windows系统下进行操作的，所以以下操作均已windows为基准&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;创建ssh-key&quot;&gt;创建SSH KEY&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;右击桌面菜单，选择打开Git Bash，执行命令：&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ssh-keygen -t- rsa -C 'youemail@example.com'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;blockquote&gt;
      &lt;p&gt;要将&lt;code class=&quot;highlighter-rouge&quot;&gt;youemail@example.com&lt;/code&gt;改成自己的github邮箱&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;执行成功后，在&lt;code class=&quot;highlighter-rouge&quot;&gt;C:\User\administrator\&lt;/code&gt;目录下找到.ssh文件夹，里面会有两个文件，&lt;code class=&quot;highlighter-rouge&quot;&gt;id_rsa&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;id_rsa.pub&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;将公匙中的内容复制出来添加到github的sshkey中&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;推送仓库&quot;&gt;推送仓库&lt;/h3&gt;

&lt;p&gt;有两种方式可以操作：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;推送现有仓库&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git remote add origin https://github.com/githubname/gitDemo.git
$ git remote add origin git@github.com:yougithubname/project.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;blockquote&gt;
      &lt;p&gt;先关联远程库，origin为关联远程库的名称&lt;/p&gt;

      &lt;p&gt;第一条命令是http关联，缺点是每次提交都需要输入一回账号和密码&lt;/p&gt;

      &lt;p&gt;第二条命令是ssh关联，需要把sshkey公钥绑定到github的ssh上面&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git push -u origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;blockquote&gt;
      &lt;p&gt;推送现有仓库到远程库，由于远程库是空的，加了&lt;code class=&quot;highlighter-rouge&quot;&gt;-u&lt;/code&gt;参数可以把本地的master和远程的master分支关联起来&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;克隆远程库至本地&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git clone git@github.com:yougithubname/project.git
$ git clone https://github.com/yougithubname.gitDemo.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;blockquote&gt;
      &lt;p&gt;同样的第一条是http的方式，第二条是ssh方式，克隆下来后，默认的远程库关联名为origin&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;查看远程分支&quot;&gt;查看远程分支&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git remote&lt;/code&gt;	显示远程仓库分支，&lt;em&gt;如上面的推送仓库的master主分支会显示origin关联名&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git remote -v&lt;/code&gt;可以显示更详细的远程库分支&lt;/p&gt;

&lt;h3 id=&quot;删除远程关联&quot;&gt;删除远程关联&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git remote rm origin&lt;/code&gt;删除名为origin的远程库关联&lt;/p&gt;

&lt;h3 id=&quot;提交本地内容至远程库&quot;&gt;提交本地内容至远程库&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git push origin master&lt;/code&gt;将本地master的分支提交到远程库上&lt;/p&gt;

&lt;h3 id=&quot;获取远程库分支&quot;&gt;获取远程库分支&lt;/h3&gt;

&lt;p&gt;远程库默认clone下来的只有master主分支，clone其他分支命令如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;拉取远程分支到本地需要先指定链接&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git branch --set-upstream-to=origin/dev dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;blockquote&gt;
      &lt;p&gt;本地的dev分支和远程库的dev分支链接&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git checkout -b dev origin/dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;blockquote&gt;
      &lt;p&gt;clone远程的dev分支，并新建到本地dev分支库中&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;rebase&quot;&gt;rebase&lt;/h3&gt;

&lt;p&gt;将版本分支修改成一条直线，当远程的仓库有更新时，本地无法直接提交，需要先拉取下来，之后查看&lt;code class=&quot;highlighter-rouge&quot;&gt;log&lt;/code&gt;会发现基于上一个版本之后，提交历史分叉了，因为远程拉取下来的分支是基于上一个版本的，本地修改的内容也是基于上一个版本&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;* 本地版本
|\
| -拉取版本
|/
*上一版本
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;通过&lt;code class=&quot;highlighter-rouge&quot;&gt;git rebase&lt;/code&gt;可以将本地版本的修改改为不在基于上一版本，而且基于刚刚拉取下来的版本&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;*本地版本
*拉取版本
*上一版本
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;标签&quot;&gt;标签&lt;/h3&gt;

&lt;p&gt;当需要寻找指定版本时，&lt;code class=&quot;highlighter-rouge&quot;&gt;commit id&lt;/code&gt;十分难记，可以通过给版本添加标签便于寻找&lt;/p&gt;

&lt;h4 id=&quot;查看标签&quot;&gt;查看标签&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git tag &lt;/code&gt;命令可以查看所有的标签，&lt;strong&gt;&lt;em&gt;返回列表不是按时间顺序，而且按字母顺序的&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git show tagname&lt;/code&gt;命令可以查看指定标签名的标签信息&lt;/p&gt;

&lt;h4 id=&quot;创建标签&quot;&gt;创建标签&lt;/h4&gt;

&lt;p&gt;先进入需要打标签的分支&lt;code class=&quot;highlighter-rouge&quot;&gt;git checkout dev&lt;/code&gt;，此处切换到dev分支&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git tag v1.0
git tag -a v1.0 -m 'version 0.1'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;第一条添加的时一个v1.0的版本&lt;/p&gt;

  &lt;p&gt;第二条添加一个带有描述的标签，&lt;code class=&quot;highlighter-rouge&quot;&gt;-a 'xxxx'&lt;/code&gt;为标签名称，&lt;code class=&quot;highlighter-rouge&quot;&gt;-m 'xxxxx'&lt;/code&gt;为描述信息&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;给以前的&lt;code class=&quot;highlighter-rouge&quot;&gt;commit&lt;/code&gt;添加标签&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;先通过&lt;code class=&quot;highlighter-rouge&quot;&gt;git reflog&lt;/code&gt;找到&lt;code class=&quot;highlighter-rouge&quot;&gt;commit id&lt;/code&gt;&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git tag v1.0 10ab2j
git tag -a v1.0 -m 'version 0.1' 10ab2j
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;blockquote&gt;
      &lt;p&gt;10ab2j为指定的&lt;code class=&quot;highlighter-rouge&quot;&gt;commit id&lt;/code&gt;，通过此命令可以给指定版本添加标签&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;删除标签&quot;&gt;删除标签&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git tag -d v1.0&lt;/code&gt;删除标签为v1.0的标签&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;删除远程库的标签，必须要先在删除本地的那个标签&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git tag -d v1.0
git push origin :refs/tags/v1.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;推送标签&quot;&gt;推送标签&lt;/h4&gt;

&lt;p&gt;默认情况下，标签存在本地，不会被推送到远程库，如果要推送到远程：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git push origin v1.0
git push origin --tags
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;第一条推送v1.0的标签到远程&lt;/p&gt;

  &lt;p&gt;第二条推送所有未被推送过的本地标签到远程&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>realmline</name></author><category term="git" /><summary type="html">关联github远程库</summary></entry><entry><title type="html">git分支学习笔记</title><link href="http://localhost:4000/2018/10/27/git-1.1.html" rel="alternate" type="text/html" title="git分支学习笔记" /><published>2018-10-27T00:00:00+08:00</published><updated>2018-10-27T00:00:00+08:00</updated><id>http://localhost:4000/2018/10/27/git-1.1</id><content type="html" xml:base="http://localhost:4000/2018/10/27/git-1.1.html">&lt;h1 id=&quot;git分支学习笔记&quot;&gt;git分支学习笔记&lt;/h1&gt;

&lt;h3 id=&quot;前言&quot;&gt;前言&lt;/h3&gt;

&lt;p&gt;仓库刚创建的时候是只有一个&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;主分支的，在实际应用中，多人开发时，为了避免代码未完成，提交时对当前版本造成影响，我们可以根据当前版本创建一个分支来完成自己的模块和功能，并在完成之后合并到主分支即可，&lt;strong&gt;由于我是在windows系统下进行操作的，所以以下操作均已windows为基准&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;文中出现的dev为本次记录使用的分支名称&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;创建分支&quot;&gt;创建分支&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git branch dev
$ git checkout dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;第一条命令创建了一个名为dev的分支&lt;/li&gt;
  &lt;li&gt;第二条命令切换当前分支到dev，&lt;strong&gt;&lt;em&gt;同时HEAD也会指向dev分支&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;这两条命令也可以缩减为一条：&lt;code class=&quot;highlighter-rouge&quot;&gt;git checkout -b dev&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;查看当前分支&quot;&gt;查看当前分支&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git branch&lt;/code&gt;命令可以查看所有分支信息，其中有*标注的为当前分支&lt;/p&gt;

&lt;h3 id=&quot;合并分支&quot;&gt;合并分支&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git merge dev&lt;/code&gt;可以将dev的分支合并到当前分支，如果合并出现冲突时，需要解决冲突，然后再&lt;code class=&quot;highlighter-rouge&quot;&gt;git commit&lt;/code&gt;才行&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;默认情况下，合并的时候是处于快进模式&lt;code class=&quot;highlighter-rouge&quot;&gt;fast-forward&lt;/code&gt;（&lt;strong&gt;直接将当前分支指向被合并的分支&lt;/strong&gt;），这个模式下删除被合并的分支时，会丢失分支信息，因为合并的时候没有创建&lt;code class=&quot;highlighter-rouge&quot;&gt;commit&lt;/code&gt;&lt;/p&gt;

  &lt;p&gt;解决方案：&lt;code class=&quot;highlighter-rouge&quot;&gt;git merge --no-ff -m'xxxxx' dev&lt;/code&gt;&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;意为本次提交禁用fast-forward模式，且合并时会生成一个&lt;code class=&quot;highlighter-rouge&quot;&gt;commit&lt;/code&gt;，所以需要加上&lt;code class=&quot;highlighter-rouge&quot;&gt;-m'xxxxxx'&lt;/code&gt;&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;git log --graph --pretty=oneline --abbrev-commit&lt;/code&gt;可以查看当前分支的合并情况，&lt;strong&gt;快进模式下合并不会存在记录&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;删除分支&quot;&gt;删除分支&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git branch -d dev&lt;/code&gt;可以删除掉dev这个分支&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;当分支没有合并过，且有新增的文件在版本库时，执行&lt;code class=&quot;highlighter-rouge&quot;&gt;git branch -d dev&lt;/code&gt;是无法删除分支， 当然也可以强制删除，将&lt;code class=&quot;highlighter-rouge&quot;&gt;-d&lt;/code&gt;改为&lt;code class=&quot;highlighter-rouge&quot;&gt;-D&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;储藏当前工作区&quot;&gt;储藏当前工作区&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;当文件修改未完成，又需要紧急修改另一个文件时，提交当前未完成的代码肯定会有影响，这个时候可以先储藏当前工作区&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git stash&lt;/code&gt;可以储藏当前工作区，需要注意的是：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如果目录下有没被git管理的文件，那么&lt;code class=&quot;highlighter-rouge&quot;&gt;git status&lt;/code&gt;还是会提示将那些文件&lt;code class=&quot;highlighter-rouge&quot;&gt;add&lt;/code&gt;到暂存区&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;如果没有上述的情况，那就可以执行&lt;code class=&quot;highlighter-rouge&quot;&gt;git stash&lt;/code&gt;，然后创建分支修改另一个文件：&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;修复完成后，提交并合并到最新分支，然后回到储藏的那个分支，还原工作区&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git stash apply
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;blockquote&gt;
      &lt;p&gt;通过上面的命令可以恢复内容，但是在&lt;code class=&quot;highlighter-rouge&quot;&gt;stash&lt;/code&gt;里面的内容不会删除，需要&lt;code class=&quot;highlighter-rouge&quot;&gt;git stash drop&lt;/code&gt;来删除&lt;/p&gt;

      &lt;p&gt;解决方案：&lt;code class=&quot;highlighter-rouge&quot;&gt;git stash pop&lt;/code&gt;可以在恢复的同时删除掉储藏的内容&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;查看储藏区的内容&quot;&gt;查看储藏区的内容&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git stash list&lt;/code&gt;可以查看储藏区的内容&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;恢复指定储藏区内容&lt;code class=&quot;highlighter-rouge&quot;&gt;git stash apply stash@{0}&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;删除指定储藏区内容&lt;code class=&quot;highlighter-rouge&quot;&gt;git stash drop stash@{0} &lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;删除所有储藏区的内容&lt;code class=&quot;highlighter-rouge&quot;&gt;git stash clear&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>realmline</name></author><category term="git" /><summary type="html">git分支学习笔记</summary></entry><entry><title type="html">git基础操作学习笔记</title><link href="http://localhost:4000/2018/10/26/git-1.0.html" rel="alternate" type="text/html" title="git基础操作学习笔记" /><published>2018-10-26T00:00:00+08:00</published><updated>2018-10-26T00:00:00+08:00</updated><id>http://localhost:4000/2018/10/26/git-1.0</id><content type="html" xml:base="http://localhost:4000/2018/10/26/git-1.0.html">&lt;h1 id=&quot;git基础操作学习笔记&quot;&gt;git基础操作学习笔记&lt;/h1&gt;

&lt;h3 id=&quot;前言&quot;&gt;前言&lt;/h3&gt;

&lt;p&gt;git是当下最先进的分布式版本控制系统，原来在公司一直用的svn，不过由于想要尝试制作个人博客，就通过廖雪峰老师的git教程开始了学习，&lt;strong&gt;由于我是在windows系统下进行操作的，所以以下操作均已windows为基准&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;配置用户名和邮箱&quot;&gt;配置用户名和邮箱&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git config --global user.name 'youname'
$ git config --global user.email 'youemail'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;通过输入上述命令绑定用户名和邮箱，加了–global表示这台电脑会统一使用这个配置&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;给单独仓库设置用户名和邮箱，&lt;strong&gt;要先进入对应仓库目录&lt;/strong&gt;，然后执行命令：&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git config user.name 'youname'
$ git config user.email 'youemail'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;blockquote&gt;
      &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git --list&lt;/code&gt;可以查看当前配置，&lt;strong&gt;在当前仓库下使用会优先显示当前仓库的配置，没有配置的内容会显示全局配置&lt;/strong&gt;&lt;/p&gt;

      &lt;p&gt;修改的时候也是执行相同的命令，改变youname和email即可&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;创建一个仓库&quot;&gt;创建一个仓库&lt;/h3&gt;

&lt;p&gt;打开&lt;code class=&quot;highlighter-rouge&quot;&gt;cmd&lt;/code&gt;或者&lt;code class=&quot;highlighter-rouge&quot;&gt;power shell&lt;/code&gt;，然后通过&lt;code class=&quot;highlighter-rouge&quot;&gt;cd e:\path&lt;/code&gt;进入要创建仓库的文件夹，并执行&lt;code class=&quot;highlighter-rouge&quot;&gt;git init&lt;/code&gt;命令&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;提示创建好了一个空仓库，当前目录下多一个&lt;code class=&quot;highlighter-rouge&quot;&gt;.get&lt;/code&gt;的目录，这个目录默认是隐藏的，用于跟踪管理git版本库，为了避免仓库出现问题，最好不要修改这个目录的文件&lt;/p&gt;

&lt;h3 id=&quot;把文件添加到版本库&quot;&gt;把文件添加到版本库&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;git是无法操作仓库目录外的文件的 ，只能操作当前仓库目录下的文件&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;将文件添加到仓库分两步&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git add xxx.txt
$ git commit -m'xxxxxxxxxxxxx'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;将文件添加到暂存区&lt;code class=&quot;highlighter-rouge&quot;&gt;git add xxx.txt&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;将文件添加到仓库&lt;code class=&quot;highlighter-rouge&quot;&gt;git commit -m'xxxxxxxxx'&lt;/code&gt;,
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git add&lt;/code&gt;是将某个文件添加到暂存区，后面的&lt;code class=&quot;highlighter-rouge&quot;&gt;xxx.txt&lt;/code&gt;可以是文件也可以是当前目录下的一个目录&lt;code class=&quot;highlighter-rouge&quot;&gt;git add /&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;strong&gt;如果需要撤销add操作，&lt;a href=&quot;#1&quot;&gt;看这里&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git commit&lt;/code&gt;是将暂存区的内容提交到仓库，&lt;code class=&quot;highlighter-rouge&quot;&gt;-m'xxxx'&lt;/code&gt;是本次提交的描述，&lt;strong&gt;必填&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;工作区暂存区版本库&quot;&gt;工作区&amp;amp;暂存区&amp;amp;版本库&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;../assets/posts/2018-10/2.jpg&quot; alt=&quot;工作区&amp;amp;暂存区&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;在本地仓库目录下&lt;/strong&gt;，除了隐藏目录.git之外的都是工作区&lt;/li&gt;
  &lt;li&gt;版本库目录(.git)中，有一个名为暂存区&lt;code class=&quot;highlighter-rouge&quot;&gt;stage&lt;/code&gt;的区域，用来存放&lt;code class=&quot;highlighter-rouge&quot;&gt;git add&lt;/code&gt;命令添加的文件&lt;/li&gt;
  &lt;li&gt;版本库在创建的时候默认会生成一个主分支master&lt;/li&gt;
  &lt;li&gt;HEAD指向当前所在的分支，凡是命令中出现这个都是指对当前的分支的操作&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;查看仓库的当前状态&quot;&gt;查看仓库的当前状态&lt;/h3&gt;

&lt;p&gt;通过&lt;code class=&quot;highlighter-rouge&quot;&gt;git status&lt;/code&gt;可以查看仓库当前状态，目前记录下有这几种状态&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Untracked files&lt;/strong&gt;：当前目录下有未被git管理的文件&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Changes to be committed&lt;/strong&gt;：有文件在暂存区中，但是还没有&lt;code class=&quot;highlighter-rouge&quot;&gt;commit&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Changes not staged for commit&lt;/strong&gt;：有文件修改，但是还没有&lt;code class=&quot;highlighter-rouge&quot;&gt;add&lt;/code&gt;到暂存区&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;查看文件差异&quot;&gt;查看文件差异&lt;/h3&gt;

&lt;p&gt;当仓库管理下的文件在工作区被修改时，可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;git diff filename&lt;/code&gt;或者&lt;code class=&quot;highlighter-rouge&quot;&gt;git diff HEAD --filename&lt;/code&gt;来查看差异&lt;/p&gt;

&lt;h5 id=&quot;git-diff-filename和git-diff-head---filename的差异&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git diff filename&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;git diff HEAD --filename&lt;/code&gt;的差异&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git diff filename&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;当暂存区没有文件时，比较的是&lt;code class=&quot;highlighter-rouge&quot;&gt;工作区&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;上次提交版本&lt;/code&gt;的文件&lt;/li&gt;
      &lt;li&gt;当暂存区有文件时，比较的是&lt;code class=&quot;highlighter-rouge&quot;&gt;当前工作区&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;暂存区&lt;/code&gt;的文件&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git diff HEAD --filename&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;比较的是工作区和版本库中的文件的差别&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;需要注意的是&lt;code class=&quot;highlighter-rouge&quot;&gt;git diff&lt;/code&gt;&lt;/em&gt;只会显示工作区的差异，当文件被add到暂存区时，在执行这个命令就什么也不会返回，&lt;strong&gt;加上&lt;code class=&quot;highlighter-rouge&quot;&gt;git diff --cached&lt;/code&gt;参数则可以查看暂存区和版本库的差异&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;查看版本日志&quot;&gt;查看版本日志&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git log&lt;/code&gt;命令会列出所有历史记录，最近的排在上方，记录过多时，通过&lt;code class=&quot;highlighter-rouge&quot;&gt;↑&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;↓&lt;/code&gt;来控制显示，且通过&lt;code class=&quot;highlighter-rouge&quot;&gt;q&lt;/code&gt;退出，如果要看详细的版本分支结构可以通过加上参数实现，&lt;a href=&quot;https://git-scm.com/docs/git-log&quot; target=&quot;_blank&quot;&gt;详细参数&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;查看每一个命令的版本日志&quot;&gt;查看每一个命令的版本日志&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git reflog&lt;/code&gt;可以查找所有历史的记录，可以找到指定&lt;code class=&quot;highlighter-rouge&quot;&gt;commit id&lt;/code&gt;回退版本&lt;/p&gt;

&lt;h3 id=&quot;回退版本&quot;&gt;&lt;span id=&quot;1&quot;&gt;回退版本&lt;/span&gt;&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git reset --hrad HEAD^
$ git reset --hard HEAD^^
$ git reset HEAD 'filename'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;第一条命令可以回退到上个版本&lt;/li&gt;
  &lt;li&gt;第二条命令可以回退到上上个版本，通过改变&lt;code class=&quot;highlighter-rouge&quot;&gt;HEAD^n&lt;/code&gt;可以回退到n个版本&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;第三条命令可以将filename的从暂存区删除&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;删除文件&quot;&gt;删除文件&lt;/h3&gt;

&lt;p&gt;执行&lt;code class=&quot;highlighter-rouge&quot;&gt;git rm filename&lt;/code&gt;命令，即可删除仓库文件，&lt;strong&gt;注意：还需要&lt;code class=&quot;highlighter-rouge&quot;&gt;commit&lt;/code&gt;，不然仓库的文件会还存在&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;总结&quot;&gt;总结&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;git中的&lt;code class=&quot;highlighter-rouge&quot;&gt;add&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;commit&lt;/code&gt;操作并不是1对1的关系，&lt;code class=&quot;highlighter-rouge&quot;&gt;commit&lt;/code&gt;只是提交暂存区的文件，所以一次&lt;code class=&quot;highlighter-rouge&quot;&gt;commit&lt;/code&gt;可以对应多次&lt;code class=&quot;highlighter-rouge&quot;&gt;add&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;git是针对修改，而不是文件
    &lt;ul&gt;
      &lt;li&gt;修改文件并&lt;code class=&quot;highlighter-rouge&quot;&gt;add&lt;/code&gt;后，再次修改文件且不&lt;code class=&quot;highlighter-rouge&quot;&gt;add&lt;/code&gt;，然后直接&lt;code class=&quot;highlighter-rouge&quot;&gt;commit&lt;/code&gt;，会发现只有第一次的修改被提交了&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;如果被托管的文件不是通过&lt;code class=&quot;highlighter-rouge&quot;&gt;git rm&lt;/code&gt;而是直接在本地删除时，需要使用&lt;code class=&quot;highlighter-rouge&quot;&gt;commit -am'xxxxx'&lt;/code&gt;，这样才会将删除同步到仓库，而&lt;code class=&quot;highlighter-rouge&quot;&gt;git rm&lt;/code&gt;删除的话，只需要&lt;code class=&quot;highlighter-rouge&quot;&gt;commit -m&lt;/code&gt;即可&lt;/li&gt;
  &lt;li&gt;HEAD指向的是最新&lt;code class=&quot;highlighter-rouge&quot;&gt;commit id&lt;/code&gt;的版本&lt;/li&gt;
&lt;/ul&gt;</content><author><name>realmline</name></author><category term="git" /><summary type="html">git基础操作学习笔记</summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/myblog,cd%20mtblog,jekyll%20serve/jekyll/update/2018/10/25/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2018-10-25T21:20:04+08:00</published><updated>2018-10-25T21:20:04+08:00</updated><id>http://localhost:4000/myblog,cd%20mtblog,jekyll%20serve/jekyll/update/2018/10/25/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/myblog,cd%20mtblog,jekyll%20serve/jekyll/update/2018/10/25/welcome-to-jekyll.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name>true</name></author><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry></feed>