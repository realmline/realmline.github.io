<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-10-26T23:59:27+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">不可视境界线</title><subtitle>用于个人学习整理的博客</subtitle><entry><title type="html">git基础操作学习笔记</title><link href="http://localhost:4000/2018/10/26/git-1.0.html" rel="alternate" type="text/html" title="git基础操作学习笔记" /><published>2018-10-26T00:00:00+08:00</published><updated>2018-10-26T00:00:00+08:00</updated><id>http://localhost:4000/2018/10/26/git-1.0</id><content type="html" xml:base="http://localhost:4000/2018/10/26/git-1.0.html">&lt;h1 id=&quot;git基础操作学习笔记&quot;&gt;git基础操作学习笔记&lt;/h1&gt;

&lt;h3 id=&quot;前言&quot;&gt;前言&lt;/h3&gt;

&lt;p&gt;git是当下最先进的分布式版本控制系统，原来在公司一直用的svn，不过由于想要尝试制作个人博客，就通过廖雪峰老师的git教程开始了学习，&lt;strong&gt;由于我是在windows系统下进行操作的，所以以下操作均已windows为基准&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;创建一个仓库&quot;&gt;创建一个仓库&lt;/h3&gt;

&lt;p&gt;打开&lt;code class=&quot;highlighter-rouge&quot;&gt;cmd&lt;/code&gt;或者&lt;code class=&quot;highlighter-rouge&quot;&gt;power shell&lt;/code&gt;，然后通过&lt;code class=&quot;highlighter-rouge&quot;&gt;cd e:\pathh&lt;/code&gt;进入要创建仓库的文件夹，并执行&lt;code class=&quot;highlighter-rouge&quot;&gt;git init&lt;/code&gt;命令&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;提示创建好了一个空仓库，当前目录下多一个&lt;code class=&quot;highlighter-rouge&quot;&gt;.get&lt;/code&gt;的目录，这个目录默认是隐藏的，用于跟踪管理git版本库，为了避免仓库出现问题，最好不要修改这个目录的文件&lt;/p&gt;

&lt;h3 id=&quot;把文件添加到版本库&quot;&gt;把文件添加到版本库&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;git是无法操作仓库目录外的文件的 ，只能操作当前仓库目录下的文件&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;将文件添加到仓库分两步&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git add xxx.txt
$ git commit -m'xxxxxxxxxxxxx'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;将文件添加到暂存区&lt;code class=&quot;highlighter-rouge&quot;&gt;git add xxx.txt&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;将文件添加到仓库&lt;code class=&quot;highlighter-rouge&quot;&gt;git commit -m'xxxxxxxxx'&lt;/code&gt;,
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git add&lt;/code&gt;是将某个文件添加到暂存区，后面的&lt;code class=&quot;highlighter-rouge&quot;&gt;xxx.txt&lt;/code&gt;可以是文件也可以是当前目录下的一个目录&lt;code class=&quot;highlighter-rouge&quot;&gt;git add /&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;strong&gt;如果需要撤销add操作，&lt;a href=&quot;#1&quot;&gt;看这里&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git commit&lt;/code&gt;是将暂存区的内容提交到仓库，&lt;code class=&quot;highlighter-rouge&quot;&gt;-m'xxxx'&lt;/code&gt;是本次提交的描述，&lt;strong&gt;必填&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;查看仓库的当前状态&quot;&gt;查看仓库的当前状态&lt;/h3&gt;

&lt;p&gt;通过&lt;code class=&quot;highlighter-rouge&quot;&gt;git status&lt;/code&gt;可以查看仓库当前状态，目前记录下有这几种状态&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Untracked files&lt;/strong&gt;：当前目录下有未被git管理的文件&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Changes to be committed&lt;/strong&gt;：有文件在暂存区中，但是还没有&lt;code class=&quot;highlighter-rouge&quot;&gt;commit&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Changes not staged for commit&lt;/strong&gt;：有文件修改，但是还没有&lt;code class=&quot;highlighter-rouge&quot;&gt;add&lt;/code&gt;到暂存区&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;查看文件差异&quot;&gt;查看文件差异&lt;/h3&gt;

&lt;p&gt;当仓库管理下的文件在工作区被修改时，可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;git diff filename&lt;/code&gt;或者&lt;code class=&quot;highlighter-rouge&quot;&gt;git diff HEAD --filename&lt;/code&gt;来查看差异&lt;/p&gt;

&lt;h5 id=&quot;git-diff-filename和git-diff-head---filename的差异&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git diff filename&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;git diff HEAD --filename&lt;/code&gt;的差异&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git diff filename&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;当暂存区没有文件时，比较的是&lt;em&gt;工作区&lt;/em&gt;和&lt;em&gt;上次提交版本&lt;/em&gt;的文件&lt;/li&gt;
      &lt;li&gt;当暂存区有文件时，比较的是&lt;code class=&quot;highlighter-rouge&quot;&gt;当前工作区&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;暂存区&lt;/code&gt;的文件&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git diff HEAD --filename&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;比较的是当前工作区和版本库中的文件的差别&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;需要注意的是&lt;code class=&quot;highlighter-rouge&quot;&gt;git diff&lt;/code&gt;&lt;/em&gt;只会显示工作区的差异，当文件被add到暂存区时，在执行这个命令就什么也不会返回&lt;/p&gt;

&lt;h3 id=&quot;查看版本日志&quot;&gt;查看版本日志&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git log&lt;/code&gt;命令会列出所有历史记录，最近的排在上方，记录过多时，通过&lt;code class=&quot;highlighter-rouge&quot;&gt;↑&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;↓&lt;/code&gt;来控制显示，且通过&lt;code class=&quot;highlighter-rouge&quot;&gt;q&lt;/code&gt;退出，如果要看详细的版本分支结构可以通过加上参数实现，&lt;a href=&quot;https://git-scm.com/docs/git-log&quot; target=&quot;_blank&quot;&gt;详细参数&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;查看每一个命令的版本日志&quot;&gt;查看每一个命令的版本日志&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git reflog&lt;/code&gt;可以查找所有历史的记录，可以找到指定&lt;code class=&quot;highlighter-rouge&quot;&gt;commit id&lt;/code&gt;回退版本&lt;/p&gt;

&lt;h3 id=&quot;回退版本&quot;&gt;&lt;span id=&quot;1&quot;&gt;回退版本&lt;/span&gt;&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git reset --hrad HEAD^
$ git reset --hard HEAD^^
$ git reset HEAD 'filename'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;第一条命令可以回退到上个版本&lt;/li&gt;
  &lt;li&gt;第二条命令可以回退到上上个版本，通过改变&lt;code class=&quot;highlighter-rouge&quot;&gt;HEAD^n&lt;/code&gt;可以回退到n个版本&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;第三条命令可以将filename的从暂存区删除&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;删除文件&quot;&gt;删除文件&lt;/h3&gt;

&lt;p&gt;执行&lt;code class=&quot;highlighter-rouge&quot;&gt;git rm filename&lt;/code&gt;命令，即可删除仓库文件，&lt;strong&gt;注意：还需要&lt;code class=&quot;highlighter-rouge&quot;&gt;commit&lt;/code&gt;，不然仓库的文件会还存在&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;总结&quot;&gt;总结&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;git中的&lt;code class=&quot;highlighter-rouge&quot;&gt;add&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;commit&lt;/code&gt;操作并不是1对1的关系，&lt;code class=&quot;highlighter-rouge&quot;&gt;commit&lt;/code&gt;只是提交暂存区的文件，所以一次&lt;code class=&quot;highlighter-rouge&quot;&gt;commit&lt;/code&gt;可以对应多次&lt;code class=&quot;highlighter-rouge&quot;&gt;add&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;git是针对修改，而不是文件
    &lt;ul&gt;
      &lt;li&gt;修改文件并&lt;code class=&quot;highlighter-rouge&quot;&gt;add&lt;/code&gt;后，再次修改文件且不&lt;code class=&quot;highlighter-rouge&quot;&gt;add&lt;/code&gt;，然后直接&lt;code class=&quot;highlighter-rouge&quot;&gt;commit&lt;/code&gt;，会发现只有第一次的修改被提交了&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;如果被托管的文件不是通过&lt;code class=&quot;highlighter-rouge&quot;&gt;git rm&lt;/code&gt;而是直接在本地删除时，需要使用&lt;code class=&quot;highlighter-rouge&quot;&gt;commit -am'xxxxx'&lt;/code&gt;，这样才会将删除同步到仓库，而&lt;code class=&quot;highlighter-rouge&quot;&gt;git rm&lt;/code&gt;删除的话，只需要&lt;code class=&quot;highlighter-rouge&quot;&gt;commit -m&lt;/code&gt;即可&lt;/li&gt;
  &lt;li&gt;git命令中出现的HEAD均为本地最新版本的意思&lt;/li&gt;
&lt;/ul&gt;</content><author><name>realmline</name></author><category term="git" /><summary type="html">git基础操作学习笔记</summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/myblog,cd%20mtblog,jekyll%20serve/jekyll/update/2018/10/25/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2018-10-25T21:20:04+08:00</published><updated>2018-10-25T21:20:04+08:00</updated><id>http://localhost:4000/myblog,cd%20mtblog,jekyll%20serve/jekyll/update/2018/10/25/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/myblog,cd%20mtblog,jekyll%20serve/jekyll/update/2018/10/25/welcome-to-jekyll.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry></feed>